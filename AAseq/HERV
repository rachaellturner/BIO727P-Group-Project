# HERV testing
# Modules
from Bio import SeqIO
import re

records = []

# regular expressions
regex = re.compile(r"^[a-zA-Z0-9]+_[a-zA-Z0-9]+_([a-zA-Z0-9-]+).+strand=([+-])")  # repName and strand from fasta
regex2 = re.compile(r"([0-9]+)-([0-9]+)")  # sequence location
regex3 = re.compile(r"(M\w+)\*")  # ORFs
regex4 = re.compile(r"C\w\wC\w\w\w\wH\w\w\w\wC")  # GAG regular expression: zinc finger
regex5 = re.compile(r"LPQG")  # POL regular expression: motif
regex6 = re.compile(r"Y\wDD")  # POL regulalar expression: motif
regex7 = re.compile(r"strand=([+-])")  # strand


# Updates list with description and sequence in tuple format (description, sequence, ORF)
for seq_record in SeqIO.parse("HERVsequences.fasta", "fasta"):
    #print("Processing sequences...")
    
    # translates sequences in all reading frames
    AAseq1 = str((seq_record.seq).translate())
    AAseq2 = str((seq_record.seq[1:]).translate())
    AAseq3 = str((seq_record.seq[2:]).translate())
    
    allRF = [AAseq1, AAseq2, AAseq3]  # list of all reading frames
    
    # empty list for ORF that are found in each sequence
    GAG = ["None"]
    POL = ["None"]
    ENV = ["None"]
    
    
    #find ORFs that lengths longer than specified
    for seq in allRF:
        ORFs = re.findall(regex3, seq)
        for ORF in ORFs:
            if len(ORF)>500:  # ORFs longer than this length selected
                #identify which ORF by regular expression
                if (regex4.search(ORF)!= None):
                    GAG.append(ORF)
                elif (regex5.search(ORF)!=None) or (regex6.search(ORF)!=None):
                    POL.append(ORF)
                else:
                    ENV.append(ORF)                
            else:
                continue
                
    # sort sequences by length and select longest sequence
    GAG.sort(key=len)
    GAG = GAG[-1]
    
    POL.sort(key=len)
    POL = POL[-1]
    
    ENV.sort(key=len)
    ENV = ENV[-1]
    
    # create tuple list
    records.append((seq_record.description, seq_record.seq, GAG, POL, ENV))

# Creates CSV file from list of tuples
OUTF = open("HERVsequences.csv", "wt")
OUTF.write("repName\tgenoStart\tgenoEnd\tStrand\tDNAseq\tGAG\tPOL\tENV\n")  # columns in CSV

for entry in records:
    #print("Writing sequences to output file...")
    coord = re.search(regex2, entry[0])
    genoStart = coord.group(1)
    genoEnd =  coord.group(2)
    OUTF.write((regex.search(entry[0])).group(1)+"\t"+genoStart+"\t"+genoEnd+"\t"+(regex.search(entry[0])).group(2)+"\t"+str(entry[1])+"\t"+entry[2]+"\t"+entry[3]+"\t"+entry[4]+"\n")

OUTF.close()
